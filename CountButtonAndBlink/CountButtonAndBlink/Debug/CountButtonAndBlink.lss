
CountButtonAndBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000018a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a5  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cc  00000000  00000000  000009d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cf  00000000  00000000  0000109d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000136c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b6  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b4  00000000  00000000  00001766  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 77 00 	call	0xee	; 0xee <main>
  88:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:

unsigned buttonPresses = 0;

void init(void){
	// LED
	DDRB |= (1<<5);		// Configure PB5 as Output
  90:	84 b1       	in	r24, 0x04	; 4
  92:	80 62       	ori	r24, 0x20	; 32
  94:	84 b9       	out	0x04, r24	; 4
	
	// Button
	DDRB &= ~(1<<7);	//Configure PB1 as Input
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8f 77       	andi	r24, 0x7F	; 127
  9a:	84 b9       	out	0x04, r24	; 4
	PORTB |= 1<<7;		//Enable Internal Pull-Up at PB1
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	08 95       	ret

000000a4 <blink>:
}

void blink(){
	for(unsigned i = 0; i <= buttonPresses; i++){
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	1a c0       	rjmp	.+52     	; 0xde <blink+0x3a>
		LED_ON;
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	4f e3       	ldi	r20, 0x3F	; 63
  b2:	82 e4       	ldi	r24, 0x42	; 66
  b4:	9f e0       	ldi	r25, 0x0F	; 15
  b6:	41 50       	subi	r20, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <blink+0x12>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <blink+0x1c>
  c0:	00 00       	nop
		_delay_ms(5000);
		LED_OFF;
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8f 7d       	andi	r24, 0xDF	; 223
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	4f e3       	ldi	r20, 0x3F	; 63
  ca:	82 e4       	ldi	r24, 0x42	; 66
  cc:	9f e0       	ldi	r25, 0x0F	; 15
  ce:	41 50       	subi	r20, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <blink+0x2a>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <blink+0x34>
  d8:	00 00       	nop
	DDRB &= ~(1<<7);	//Configure PB1 as Input
	PORTB |= 1<<7;		//Enable Internal Pull-Up at PB1
}

void blink(){
	for(unsigned i = 0; i <= buttonPresses; i++){
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e6:	82 17       	cp	r24, r18
  e8:	93 07       	cpc	r25, r19
  ea:	f8 f6       	brcc	.-66     	; 0xaa <blink+0x6>
		LED_ON;
		_delay_ms(5000);
		LED_OFF;
		_delay_ms(5000);
	}
}
  ec:	08 95       	ret

000000ee <main>:

int main(void){
	init();
  ee:	0e 94 48 00 	call	0x90	; 0x90 <init>
	
	while (1){
		if(BUTTON_PRESS){
  f2:	1f 99       	sbic	0x03, 7	; 3
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <main+0x4>
			blink(buttonPresses ++);
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fe:	9c 01       	movw	r18, r24
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 108:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	0e 94 52 00 	call	0xa4	; 0xa4 <blink>
 110:	f0 cf       	rjmp	.-32     	; 0xf2 <main+0x4>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
