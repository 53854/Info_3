
11_LedNext.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000025e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000763  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b1  00000000  00000000  00000a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000364  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003af  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  0000186b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000018b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:

static volatile uint16_t counter = 0;

void init(void){
	// LED
	DDRB |= 0b00000001; // PB0 as output
  90:	84 b1       	in	r24, 0x04	; 4
  92:	81 60       	ori	r24, 0x01	; 1
  94:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b00111110; // PC1-6 as output
  96:	87 b1       	in	r24, 0x07	; 7
  98:	8e 63       	ori	r24, 0x3E	; 62
  9a:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11110001; // PD0-4 as output
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	81 6f       	ori	r24, 0xF1	; 241
  a0:	8a b9       	out	0x0a, r24	; 10
	
	PORTC	|= (1<<1);	// LED 1 one
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	88 b9       	out	0x08, r24	; 8
	
	// Button
	DDRD &= ~(1<<1);	//Configure PD1 as Input
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	8d 7f       	andi	r24, 0xFD	; 253
  ac:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1<<1;		//Enable Internal Pull-Up at PD1
  ae:	8b b1       	in	r24, 0x0b	; 11
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	8b b9       	out	0x0b, r24	; 11
  b4:	08 95       	ret

000000b6 <onButtonPress>:
	TCCR0B &= ~(1<<CS01);*/
}

void onButtonPress(){
	//static volatile uint16_t oneSecondEqual = 60;
	switch (counter){
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  be:	84 3f       	cpi	r24, 0xF4	; 244
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	92 07       	cpc	r25, r18
  c4:	09 f4       	brne	.+2      	; 0xc8 <onButtonPress+0x12>
  c6:	44 c0       	rjmp	.+136    	; 0x150 <onButtonPress+0x9a>
  c8:	80 f4       	brcc	.+32     	; 0xea <onButtonPress+0x34>
  ca:	88 3c       	cpi	r24, 0xC8	; 200
  cc:	91 05       	cpc	r25, r1
  ce:	59 f1       	breq	.+86     	; 0x126 <onButtonPress+0x70>
  d0:	20 f4       	brcc	.+8      	; 0xda <onButtonPress+0x24>
  d2:	84 36       	cpi	r24, 0x64	; 100
  d4:	91 05       	cpc	r25, r1
  d6:	01 f1       	breq	.+64     	; 0x118 <onButtonPress+0x62>
  d8:	08 95       	ret
  da:	8c 32       	cpi	r24, 0x2C	; 44
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	92 07       	cpc	r25, r18
  e0:	49 f1       	breq	.+82     	; 0x134 <onButtonPress+0x7e>
  e2:	80 39       	cpi	r24, 0x90	; 144
  e4:	91 40       	sbci	r25, 0x01	; 1
  e6:	69 f1       	breq	.+90     	; 0x142 <onButtonPress+0x8c>
  e8:	08 95       	ret
  ea:	80 32       	cpi	r24, 0x20	; 32
  ec:	23 e0       	ldi	r18, 0x03	; 3
  ee:	92 07       	cpc	r25, r18
  f0:	09 f4       	brne	.+2      	; 0xf4 <onButtonPress+0x3e>
  f2:	43 c0       	rjmp	.+134    	; 0x17a <onButtonPress+0xc4>
  f4:	40 f4       	brcc	.+16     	; 0x106 <onButtonPress+0x50>
  f6:	88 35       	cpi	r24, 0x58	; 88
  f8:	22 e0       	ldi	r18, 0x02	; 2
  fa:	92 07       	cpc	r25, r18
  fc:	81 f1       	breq	.+96     	; 0x15e <onButtonPress+0xa8>
  fe:	8c 3b       	cpi	r24, 0xBC	; 188
 100:	92 40       	sbci	r25, 0x02	; 2
 102:	a1 f1       	breq	.+104    	; 0x16c <onButtonPress+0xb6>
 104:	08 95       	ret
 106:	84 38       	cpi	r24, 0x84	; 132
 108:	23 e0       	ldi	r18, 0x03	; 3
 10a:	92 07       	cpc	r25, r18
 10c:	e9 f1       	breq	.+122    	; 0x188 <onButtonPress+0xd2>
 10e:	88 3e       	cpi	r24, 0xE8	; 232
 110:	93 40       	sbci	r25, 0x03	; 3
 112:	09 f4       	brne	.+2      	; 0x116 <onButtonPress+0x60>
 114:	40 c0       	rjmp	.+128    	; 0x196 <onButtonPress+0xe0>
 116:	08 95       	ret
		case 100:
		PORTC		&= ~(1<<1); // 1GN off
 118:	88 b1       	in	r24, 0x08	; 8
 11a:	8d 7f       	andi	r24, 0xFD	; 253
 11c:	88 b9       	out	0x08, r24	; 8
		PORTC		|= (1<<2); // 2GN on
 11e:	88 b1       	in	r24, 0x08	; 8
 120:	84 60       	ori	r24, 0x04	; 4
 122:	88 b9       	out	0x08, r24	; 8
		break;
 124:	08 95       	ret
		case 200:
		PORTC		&= ~(1<<2); // 2GN off
 126:	88 b1       	in	r24, 0x08	; 8
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	88 b9       	out	0x08, r24	; 8
		PORTC		|= (1<<3); // 3GN on
 12c:	88 b1       	in	r24, 0x08	; 8
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	88 b9       	out	0x08, r24	; 8
		break;
 132:	08 95       	ret
		case 300:
		PORTC		&= ~(1<<3); // 3GN off
 134:	88 b1       	in	r24, 0x08	; 8
 136:	87 7f       	andi	r24, 0xF7	; 247
 138:	88 b9       	out	0x08, r24	; 8
		PORTC		|= (1<<4); // 4GN on
 13a:	88 b1       	in	r24, 0x08	; 8
 13c:	80 61       	ori	r24, 0x10	; 16
 13e:	88 b9       	out	0x08, r24	; 8
		break;
 140:	08 95       	ret
		case 400:
		PORTC		&= ~(1<<4); // 4GN off
 142:	88 b1       	in	r24, 0x08	; 8
 144:	8f 7e       	andi	r24, 0xEF	; 239
 146:	88 b9       	out	0x08, r24	; 8
		PORTC		|= (1<<5); // 5GN on
 148:	88 b1       	in	r24, 0x08	; 8
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	88 b9       	out	0x08, r24	; 8
		break;
 14e:	08 95       	ret
		case 500:
		PORTC		&= ~(1<<5); // 5GN off
 150:	88 b1       	in	r24, 0x08	; 8
 152:	8f 7d       	andi	r24, 0xDF	; 223
 154:	88 b9       	out	0x08, r24	; 8
		PORTD		|= (1<<4); // 6GN on
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	80 61       	ori	r24, 0x10	; 16
 15a:	8b b9       	out	0x0b, r24	; 11
		break;
 15c:	08 95       	ret
		case 600:
		PORTD		&= ~(1<<4); // 6GN off
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	8f 7e       	andi	r24, 0xEF	; 239
 162:	8b b9       	out	0x0b, r24	; 11
		PORTD		|= (1<<5); // 7GN on
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	80 62       	ori	r24, 0x20	; 32
 168:	8b b9       	out	0x0b, r24	; 11
		break;
 16a:	08 95       	ret
		case 700:
		PORTD		&= ~(1<<5); // 7GN off
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	8f 7d       	andi	r24, 0xDF	; 223
 170:	8b b9       	out	0x0b, r24	; 11
		PORTD		|= (1<<6); // 8RT on
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 64       	ori	r24, 0x40	; 64
 176:	8b b9       	out	0x0b, r24	; 11
		break;
 178:	08 95       	ret
		case 800:
		PORTD		&= ~(1<<6); // 8RT off
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	8f 7b       	andi	r24, 0xBF	; 191
 17e:	8b b9       	out	0x0b, r24	; 11
		PORTD		|= (1<<7); // 9RT on
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	80 68       	ori	r24, 0x80	; 128
 184:	8b b9       	out	0x0b, r24	; 11
		break;
 186:	08 95       	ret
		case 900:
		PORTD		&= ~(1<<7); // 9RT off
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	8f 77       	andi	r24, 0x7F	; 127
 18c:	8b b9       	out	0x0b, r24	; 11
		PORTB		|= (1<<0); // 10RT on
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	81 60       	ori	r24, 0x01	; 1
 192:	85 b9       	out	0x05, r24	; 5
		break;
 194:	08 95       	ret
		case 1000:
		PORTB		&= ~(1<<0); // 10RT off
 196:	85 b1       	in	r24, 0x05	; 5
 198:	8e 7f       	andi	r24, 0xFE	; 254
 19a:	85 b9       	out	0x05, r24	; 5
		PORTC		|= (1<<1); // 1GN on
 19c:	88 b1       	in	r24, 0x08	; 8
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	88 b9       	out	0x08, r24	; 8
		counter = 0;
 1a2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	08 95       	ret

000001ac <main>:
	
	
}

int main(void){
	init();
 1ac:	0e 94 48 00 	call	0x90	; 0x90 <init>
	
	
	while (1){
		if(BUTTON_ONE_PRESS){
 1b0:	49 9b       	sbis	0x09, 1	; 9
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <main+0x4>
			counter += 100;
 1b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1bc:	8c 59       	subi	r24, 0x9C	; 156
 1be:	9f 4f       	sbci	r25, 0xFF	; 255
 1c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			onButtonPress();
 1c8:	0e 94 5b 00 	call	0xb6	; 0xb6 <onButtonPress>
			while(BUTTON_ONE_PRESS){
 1cc:	09 c0       	rjmp	.+18     	; 0x1e0 <main+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	81 ee       	ldi	r24, 0xE1	; 225
 1d2:	94 e0       	ldi	r25, 0x04	; 4
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x28>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x32>
 1de:	00 00       	nop
 1e0:	49 99       	sbic	0x09, 1	; 9
 1e2:	f5 cf       	rjmp	.-22     	; 0x1ce <main+0x22>
 1e4:	e5 cf       	rjmp	.-54     	; 0x1b0 <main+0x4>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
