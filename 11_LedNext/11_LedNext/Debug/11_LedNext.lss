
11_LedNext.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072d  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000684  00000000  00000000  00000aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034a  00000000  00000000  0000112d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000379  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  0000188d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 21 01 	call	0x242	; 0x242 <main>
  88:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
static volatile uint16_t counter = 0;


void init(void){
	// LED
	DDRB |= 0b00000001; // PB0 as output
  90:	84 b1       	in	r24, 0x04	; 4
  92:	81 60       	ori	r24, 0x01	; 1
  94:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b00111110; // PC1-6 as output
  96:	87 b1       	in	r24, 0x07	; 7
  98:	8e 63       	ori	r24, 0x3E	; 62
  9a:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11110001; // PD0-4 as output
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	81 6f       	ori	r24, 0xF1	; 241
  a0:	8a b9       	out	0x0a, r24	; 10
	
	PORTC	|= (1<<1);	// LED 1 one
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	88 b9       	out	0x08, r24	; 8
	
	// Button
	DDRD &= ~(1<<1);	//Configure PD1 as Input
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	8d 7f       	andi	r24, 0xFD	; 253
  ac:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1<<1;		//Enable Internal Pull-Up at PD1
  ae:	8b b1       	in	r24, 0x0b	; 11
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	8b b9       	out	0x0b, r24	; 11
	
	
	// Interrupt
	sei();
  b4:	78 94       	sei
	TIMSK0 |= (1 << OCIE0A);    // Timer0 A Match enable
  b6:	ee e6       	ldi	r30, 0x6E	; 110
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
	OCR0A = 1550;                // reset compare 10ms
  c0:	8e e0       	ldi	r24, 0x0E	; 14
  c2:	87 bd       	out	0x27, r24	; 39

	TCCR0A |= (1 << WGM01);     // Configure CTC Mode
  c4:	84 b5       	in	r24, 0x24	; 36
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << WGM00);
  ca:	84 b5       	in	r24, 0x24	; 36
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << WGM02);
  d0:	85 b5       	in	r24, 0x25	; 37
  d2:	87 7f       	andi	r24, 0xF7	; 247
  d4:	85 bd       	out	0x25, r24	; 37

	TCCR0B |= (1 << CS02) | (1 << CS00); // Prescaler 1024
  d6:	85 b5       	in	r24, 0x25	; 37
  d8:	85 60       	ori	r24, 0x05	; 5
  da:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS01);
  dc:	85 b5       	in	r24, 0x25	; 37
  de:	8d 7f       	andi	r24, 0xFD	; 253
  e0:	85 bd       	out	0x25, r24	; 37
  e2:	08 95       	ret

000000e4 <switchLED>:
	}
}

void switchLED(){
	//static volatile uint16_t oneSecondEqual = 60;
	switch (counter){
  e4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
  e8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <counter+0x1>
  ec:	84 3f       	cpi	r24, 0xF4	; 244
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	92 07       	cpc	r25, r18
  f2:	09 f4       	brne	.+2      	; 0xf6 <switchLED+0x12>
  f4:	44 c0       	rjmp	.+136    	; 0x17e <switchLED+0x9a>
  f6:	80 f4       	brcc	.+32     	; 0x118 <switchLED+0x34>
  f8:	88 3c       	cpi	r24, 0xC8	; 200
  fa:	91 05       	cpc	r25, r1
  fc:	59 f1       	breq	.+86     	; 0x154 <switchLED+0x70>
  fe:	20 f4       	brcc	.+8      	; 0x108 <switchLED+0x24>
 100:	84 36       	cpi	r24, 0x64	; 100
 102:	91 05       	cpc	r25, r1
 104:	01 f1       	breq	.+64     	; 0x146 <switchLED+0x62>
 106:	08 95       	ret
 108:	8c 32       	cpi	r24, 0x2C	; 44
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	92 07       	cpc	r25, r18
 10e:	49 f1       	breq	.+82     	; 0x162 <switchLED+0x7e>
 110:	80 39       	cpi	r24, 0x90	; 144
 112:	91 40       	sbci	r25, 0x01	; 1
 114:	69 f1       	breq	.+90     	; 0x170 <switchLED+0x8c>
 116:	08 95       	ret
 118:	80 32       	cpi	r24, 0x20	; 32
 11a:	23 e0       	ldi	r18, 0x03	; 3
 11c:	92 07       	cpc	r25, r18
 11e:	09 f4       	brne	.+2      	; 0x122 <switchLED+0x3e>
 120:	43 c0       	rjmp	.+134    	; 0x1a8 <switchLED+0xc4>
 122:	40 f4       	brcc	.+16     	; 0x134 <switchLED+0x50>
 124:	88 35       	cpi	r24, 0x58	; 88
 126:	22 e0       	ldi	r18, 0x02	; 2
 128:	92 07       	cpc	r25, r18
 12a:	81 f1       	breq	.+96     	; 0x18c <switchLED+0xa8>
 12c:	8c 3b       	cpi	r24, 0xBC	; 188
 12e:	92 40       	sbci	r25, 0x02	; 2
 130:	a1 f1       	breq	.+104    	; 0x19a <switchLED+0xb6>
 132:	08 95       	ret
 134:	84 38       	cpi	r24, 0x84	; 132
 136:	23 e0       	ldi	r18, 0x03	; 3
 138:	92 07       	cpc	r25, r18
 13a:	e9 f1       	breq	.+122    	; 0x1b6 <switchLED+0xd2>
 13c:	88 3e       	cpi	r24, 0xE8	; 232
 13e:	93 40       	sbci	r25, 0x03	; 3
 140:	09 f4       	brne	.+2      	; 0x144 <switchLED+0x60>
 142:	40 c0       	rjmp	.+128    	; 0x1c4 <switchLED+0xe0>
 144:	08 95       	ret
		case 100:
		PORTC		&= ~(1<<1); // 1GN off
 146:	88 b1       	in	r24, 0x08	; 8
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	88 b9       	out	0x08, r24	; 8
		PORTC		|= (1<<2); // 2GN on
 14c:	88 b1       	in	r24, 0x08	; 8
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	88 b9       	out	0x08, r24	; 8
		break;
 152:	08 95       	ret
		case 200:
		PORTC		&= ~(1<<2); // 2GN off
 154:	88 b1       	in	r24, 0x08	; 8
 156:	8b 7f       	andi	r24, 0xFB	; 251
 158:	88 b9       	out	0x08, r24	; 8
		PORTC		|= (1<<3); // 3GN on
 15a:	88 b1       	in	r24, 0x08	; 8
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	88 b9       	out	0x08, r24	; 8
		break;
 160:	08 95       	ret
		case 300:
		PORTC		&= ~(1<<3); // 3GN off
 162:	88 b1       	in	r24, 0x08	; 8
 164:	87 7f       	andi	r24, 0xF7	; 247
 166:	88 b9       	out	0x08, r24	; 8
		PORTC		|= (1<<4); // 4GN on
 168:	88 b1       	in	r24, 0x08	; 8
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	88 b9       	out	0x08, r24	; 8
		break;
 16e:	08 95       	ret
		case 400:
		PORTC		&= ~(1<<4); // 4GN off
 170:	88 b1       	in	r24, 0x08	; 8
 172:	8f 7e       	andi	r24, 0xEF	; 239
 174:	88 b9       	out	0x08, r24	; 8
		PORTC		|= (1<<5); // 5GN on
 176:	88 b1       	in	r24, 0x08	; 8
 178:	80 62       	ori	r24, 0x20	; 32
 17a:	88 b9       	out	0x08, r24	; 8
		break;
 17c:	08 95       	ret
		case 500:
		PORTC		&= ~(1<<5); // 5GN off
 17e:	88 b1       	in	r24, 0x08	; 8
 180:	8f 7d       	andi	r24, 0xDF	; 223
 182:	88 b9       	out	0x08, r24	; 8
		PORTD		|= (1<<4); // 6GN on
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 61       	ori	r24, 0x10	; 16
 188:	8b b9       	out	0x0b, r24	; 11
		break;
 18a:	08 95       	ret
		case 600:
		PORTD		&= ~(1<<4); // 6GN off
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	8f 7e       	andi	r24, 0xEF	; 239
 190:	8b b9       	out	0x0b, r24	; 11
		PORTD		|= (1<<5); // 7GN on
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	80 62       	ori	r24, 0x20	; 32
 196:	8b b9       	out	0x0b, r24	; 11
		break;
 198:	08 95       	ret
		case 700:
		PORTD		&= ~(1<<5); // 7GN off
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	8f 7d       	andi	r24, 0xDF	; 223
 19e:	8b b9       	out	0x0b, r24	; 11
		PORTD		|= (1<<6); // 8RT on
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	8b b9       	out	0x0b, r24	; 11
		break;
 1a6:	08 95       	ret
		case 800:
		PORTD		&= ~(1<<6); // 8RT off
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	8f 7b       	andi	r24, 0xBF	; 191
 1ac:	8b b9       	out	0x0b, r24	; 11
		PORTD		|= (1<<7); // 9RT on
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	80 68       	ori	r24, 0x80	; 128
 1b2:	8b b9       	out	0x0b, r24	; 11
		break;
 1b4:	08 95       	ret
		case 900:
		PORTD		&= ~(1<<7); // 9RT off
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	8f 77       	andi	r24, 0x7F	; 127
 1ba:	8b b9       	out	0x0b, r24	; 11
		PORTB		|= (1<<0); // 10RT on
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	85 b9       	out	0x05, r24	; 5
		break;
 1c2:	08 95       	ret
		case 1000:
		PORTB		&= ~(1<<0); // 10RT off
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	8e 7f       	andi	r24, 0xFE	; 254
 1c8:	85 b9       	out	0x05, r24	; 5
		PORTC		|= (1<<1); // 1GN on
 1ca:	88 b1       	in	r24, 0x08	; 8
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	88 b9       	out	0x08, r24	; 8
		counter = 0;
 1d0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter+0x1>
 1d4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter>
 1d8:	08 95       	ret

000001da <__vector_14>:
}


static volatile uint8_t buttonStatus = 0; // 0 = PIND1 == 1

ISR(TIMER0_COMPA_vect){
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	2f 93       	push	r18
 1e6:	3f 93       	push	r19
 1e8:	4f 93       	push	r20
 1ea:	5f 93       	push	r21
 1ec:	6f 93       	push	r22
 1ee:	7f 93       	push	r23
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	if(buttonStatus == 1 && PIND1 == 1) {
 1fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	71 f4       	brne	.+28     	; 0x220 <__vector_14+0x46>
		buttonStatus = 0;
 204:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		counter += 100;
 208:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 20c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <counter+0x1>
 210:	8c 59       	subi	r24, 0x9C	; 156
 212:	9f 4f       	sbci	r25, 0xFF	; 255
 214:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <counter+0x1>
 218:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
		switchLED();
 21c:	0e 94 72 00 	call	0xe4	; 0xe4 <switchLED>
	}
}
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <main>:
		break;
	}
}

int main(void){
	init();
 242:	0e 94 48 00 	call	0x90	; 0x90 <init>
	
	while (1){
		if(BUTTON_ONE_PRESS && buttonStatus == 0){
 246:	49 99       	sbic	0x09, 1	; 9
 248:	fe cf       	rjmp	.-4      	; 0x246 <main+0x4>
 24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24e:	81 11       	cpse	r24, r1
 250:	fa cf       	rjmp	.-12     	; 0x246 <main+0x4>
			buttonStatus = 1;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 258:	f6 cf       	rjmp	.-20     	; 0x246 <main+0x4>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
