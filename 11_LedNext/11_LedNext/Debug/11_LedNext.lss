
11_LedNext.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000023e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006df  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000649  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ea  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000364  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:

static volatile uint16_t counter = 0;

void init(void){
	// LED
	DDRC |= 0b00111110; // PC1-6 as output
  90:	87 b1       	in	r24, 0x07	; 7
  92:	8e 63       	ori	r24, 0x3E	; 62
  94:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11110001; // PD0-4 as output
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	81 6f       	ori	r24, 0xF1	; 241
  9a:	8a b9       	out	0x0a, r24	; 10
	PORTC	|= (1<<1);	// LED 1 one
  9c:	88 b1       	in	r24, 0x08	; 8
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	88 b9       	out	0x08, r24	; 8
	
	// Button
	DDRD &= ~(1<<1);	//Configure PD1 as Input
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	8d 7f       	andi	r24, 0xFD	; 253
  a6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1<<1;		//Enable Internal Pull-Up at PD1
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	8b b9       	out	0x0b, r24	; 11
  ae:	08 95       	ret

000000b0 <onButtonPress>:
}

void onButtonPress(){
	//static volatile uint16_t oneSecondEqual = 60;
	
	counter = counter + 60;
  b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b8:	cc 96       	adiw	r24, 0x3c	; 60
  ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	switch (counter){
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ca:	8c 32       	cpi	r24, 0x2C	; 44
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	92 07       	cpc	r25, r18
  d0:	09 f4       	brne	.+2      	; 0xd4 <onButtonPress+0x24>
  d2:	42 c0       	rjmp	.+132    	; 0x158 <onButtonPress+0xa8>
  d4:	70 f4       	brcc	.+28     	; 0xf2 <onButtonPress+0x42>
  d6:	88 37       	cpi	r24, 0x78	; 120
  d8:	91 05       	cpc	r25, r1
  da:	49 f1       	breq	.+82     	; 0x12e <onButtonPress+0x7e>
  dc:	18 f4       	brcc	.+6      	; 0xe4 <onButtonPress+0x34>
  de:	cc 97       	sbiw	r24, 0x3c	; 60
  e0:	f9 f0       	breq	.+62     	; 0x120 <onButtonPress+0x70>
  e2:	08 95       	ret
  e4:	84 3b       	cpi	r24, 0xB4	; 180
  e6:	91 05       	cpc	r25, r1
  e8:	49 f1       	breq	.+82     	; 0x13c <onButtonPress+0x8c>
  ea:	80 3f       	cpi	r24, 0xF0	; 240
  ec:	91 05       	cpc	r25, r1
  ee:	69 f1       	breq	.+90     	; 0x14a <onButtonPress+0x9a>
  f0:	08 95       	ret
  f2:	80 3e       	cpi	r24, 0xE0	; 224
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	92 07       	cpc	r25, r18
  f8:	09 f4       	brne	.+2      	; 0xfc <onButtonPress+0x4c>
  fa:	43 c0       	rjmp	.+134    	; 0x182 <onButtonPress+0xd2>
  fc:	40 f4       	brcc	.+16     	; 0x10e <onButtonPress+0x5e>
  fe:	88 36       	cpi	r24, 0x68	; 104
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	92 07       	cpc	r25, r18
 104:	81 f1       	breq	.+96     	; 0x166 <onButtonPress+0xb6>
 106:	84 3a       	cpi	r24, 0xA4	; 164
 108:	91 40       	sbci	r25, 0x01	; 1
 10a:	a1 f1       	breq	.+104    	; 0x174 <onButtonPress+0xc4>
 10c:	08 95       	ret
 10e:	8c 31       	cpi	r24, 0x1C	; 28
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	92 07       	cpc	r25, r18
 114:	e9 f1       	breq	.+122    	; 0x190 <onButtonPress+0xe0>
 116:	88 35       	cpi	r24, 0x58	; 88
 118:	92 40       	sbci	r25, 0x02	; 2
 11a:	09 f4       	brne	.+2      	; 0x11e <onButtonPress+0x6e>
 11c:	40 c0       	rjmp	.+128    	; 0x19e <onButtonPress+0xee>
 11e:	08 95       	ret
		case 60:
		PORTC		&= ~(1<<1); // 1GN off
 120:	88 b1       	in	r24, 0x08	; 8
 122:	8d 7f       	andi	r24, 0xFD	; 253
 124:	88 b9       	out	0x08, r24	; 8
		PORTC		|= (1<<2); // 2GN on
 126:	88 b1       	in	r24, 0x08	; 8
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	88 b9       	out	0x08, r24	; 8
		break;
 12c:	08 95       	ret
		case 120:
		PORTC		&= ~(1<<2); // 2GN off
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	88 b9       	out	0x08, r24	; 8
		PORTC		|= (1<<3); // 3GN on
 134:	88 b1       	in	r24, 0x08	; 8
 136:	88 60       	ori	r24, 0x08	; 8
 138:	88 b9       	out	0x08, r24	; 8
		break;
 13a:	08 95       	ret
		case 180:
		PORTC		&= ~(1<<3); // 3GN off
 13c:	88 b1       	in	r24, 0x08	; 8
 13e:	87 7f       	andi	r24, 0xF7	; 247
 140:	88 b9       	out	0x08, r24	; 8
		PORTC		|= (1<<4); // 4GN on
 142:	88 b1       	in	r24, 0x08	; 8
 144:	80 61       	ori	r24, 0x10	; 16
 146:	88 b9       	out	0x08, r24	; 8
		break;
 148:	08 95       	ret
		case 240:
		PORTC		&= ~(1<<4); // 4GN off
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	8f 7e       	andi	r24, 0xEF	; 239
 14e:	88 b9       	out	0x08, r24	; 8
		PORTC		|= (1<<5); // 5GN on
 150:	88 b1       	in	r24, 0x08	; 8
 152:	80 62       	ori	r24, 0x20	; 32
 154:	88 b9       	out	0x08, r24	; 8
		break;
 156:	08 95       	ret
		case 300:
		PORTC		&= ~(1<<5); // 5GN off
 158:	88 b1       	in	r24, 0x08	; 8
 15a:	8f 7d       	andi	r24, 0xDF	; 223
 15c:	88 b9       	out	0x08, r24	; 8
		PORTD		|= (1<<4); // 6GN on
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 61       	ori	r24, 0x10	; 16
 162:	8b b9       	out	0x0b, r24	; 11
		break;
 164:	08 95       	ret
		case 360:
		PORTD		&= ~(1<<4); // 6GN off
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	8f 7e       	andi	r24, 0xEF	; 239
 16a:	8b b9       	out	0x0b, r24	; 11
		PORTD		|= (1<<5); // 7GN on
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	80 62       	ori	r24, 0x20	; 32
 170:	8b b9       	out	0x0b, r24	; 11
		break;
 172:	08 95       	ret
		case 420:
		PORTD		&= ~(1<<5); // 7GN off
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	8f 7d       	andi	r24, 0xDF	; 223
 178:	8b b9       	out	0x0b, r24	; 11
		PORTD		|= (1<<6); // 8RT on
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	8b b9       	out	0x0b, r24	; 11
		break;
 180:	08 95       	ret
		case 480:
		PORTD		&= ~(1<<6); // 8RT off
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	8f 7b       	andi	r24, 0xBF	; 191
 186:	8b b9       	out	0x0b, r24	; 11
		PORTD		|= (1<<7); // 9RT on
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	8b b9       	out	0x0b, r24	; 11
		break;
 18e:	08 95       	ret
		case 540:
		PORTD		&= ~(1<<7); // 9RT off
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	8f 77       	andi	r24, 0x7F	; 127
 194:	8b b9       	out	0x0b, r24	; 11
		PORTD		|= (1<<0); // 10RT on
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	8b b9       	out	0x0b, r24	; 11
		break;
 19c:	08 95       	ret
		case 600:
		PORTD		&= ~(1<<0); // 10RT off
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8e 7f       	andi	r24, 0xFE	; 254
 1a2:	8b b9       	out	0x0b, r24	; 11
		PORTC		|= (1<<1); // 1GN on
 1a4:	88 b1       	in	r24, 0x08	; 8
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	88 b9       	out	0x08, r24	; 8
		counter = 0;
 1aa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ae:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b2:	08 95       	ret

000001b4 <main>:

}
*/

int main(void){
	init();
 1b4:	0e 94 48 00 	call	0x90	; 0x90 <init>
	while (1){
		if(BUTTON_ONE_PRESS){
 1b8:	49 9b       	sbis	0x09, 1	; 9
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <main+0x4>
			onButtonPress();
 1bc:	0e 94 58 00 	call	0xb0	; 0xb0 <onButtonPress>
			while(BUTTON_ONE_PRESS){ /*_delay_ms(100);*/}
 1c0:	49 99       	sbic	0x09, 1	; 9
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <main+0xc>
 1c4:	f9 cf       	rjmp	.-14     	; 0x1b8 <main+0x4>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
