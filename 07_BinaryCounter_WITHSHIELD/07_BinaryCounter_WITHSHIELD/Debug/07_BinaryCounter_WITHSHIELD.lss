
07_BinaryCounter_WITHSHIELD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000017a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000736  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000696  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b5  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ba  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000016ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  88:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:

unsigned counter;

void init(void){
	// counter
	counter = 0;
  90:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  94:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
	// LED
	DDRC |= 0b00011110;		// Configure PC 1 - 4 as Output
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	8e 61       	ori	r24, 0x1E	; 30
  9c:	87 b9       	out	0x07, r24	; 7
	
	// Buttons
	DDRB &= ~(1<<1);	//Configure PB1 as Input
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	8d 7f       	andi	r24, 0xFD	; 253
  a2:	84 b9       	out	0x04, r24	; 4
	PORTB |= 1<<1;		//Enable Internal Pull-Up at PB1
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	85 b9       	out	0x05, r24	; 5
	
	DDRD &= ~(1<<1);	//Configure PD1 as Input
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	8d 7f       	andi	r24, 0xFD	; 253
  ae:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1<<1;		//Enable Internal Pull-Up at PD1
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	08 95       	ret

000000b8 <main>:
}


int main(void){
	init();
  b8:	0e 94 48 00 	call	0x90	; 0x90 <init>
	
	while (1){
 		if(BUTTON_ONE_PRESS){
  bc:	49 99       	sbic	0x09, 1	; 9
  be:	19 c0       	rjmp	.+50     	; 0xf2 <main+0x3a>
			counter ++;
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c8:	01 96       	adiw	r24, 0x01	; 1
			counter %= 16;
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	99 27       	eor	r25, r25
  ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			PORTC = (counter << 1);
  d6:	88 0f       	add	r24, r24
  d8:	88 b9       	out	0x08, r24	; 8
			while(BUTTON_ONE_PRESS){_delay_ms(100);}
  da:	09 c0       	rjmp	.+18     	; 0xee <main+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	81 ee       	ldi	r24, 0xE1	; 225
  e0:	94 e0       	ldi	r25, 0x04	; 4
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x2a>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x34>
  ec:	00 00       	nop
  ee:	49 9b       	sbis	0x09, 1	; 9
  f0:	f5 cf       	rjmp	.-22     	; 0xdc <main+0x24>
		} 
		if (BUTTON_TWO_PRESS){
  f2:	19 99       	sbic	0x03, 1	; 3
  f4:	e3 cf       	rjmp	.-58     	; 0xbc <main+0x4>
			counter = 0;
  f6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  fa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTC = (counter << 1);
  fe:	18 b8       	out	0x08, r1	; 8
 100:	dd cf       	rjmp	.-70     	; 0xbc <main+0x4>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
