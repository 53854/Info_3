
07_BinaryCounter_WITHSHIELD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000176  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006dd  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000657  00000000  00000000  000008f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023d  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000382  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001552  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  88:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
	PORTD |= 1<<1;		//Enable Internal Pull-Up at PD1
}

void displayBinaryCount(unsigned c){

	PORTC |= (1 << c); 
  90:	87 b1       	in	r24, 0x07	; 7
  92:	8e 61       	ori	r24, 0x1E	; 30
  94:	87 b9       	out	0x07, r24	; 7
  96:	88 b1       	in	r24, 0x08	; 8
  98:	81 7e       	andi	r24, 0xE1	; 225
  9a:	88 b9       	out	0x08, r24	; 8
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	8d 7f       	andi	r24, 0xFD	; 253
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	8b b9       	out	0x0b, r24	; 11
  ae:	08 95       	ret

000000b0 <main>:

}


int main(void){
	init();
  b0:	0e 94 48 00 	call	0x90	; 0x90 <init>
	
	while (1){
 		if(BUTTON_ONE_PRESS){
  b4:	49 99       	sbic	0x09, 1	; 9
  b6:	1c c0       	rjmp	.+56     	; 0xf0 <main+0x40>
			counter ++;
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			PORTC &= ~0b11111111;
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	18 b8       	out	0x08, r1	; 8
			PORTC |= (1 << (counter%16)); 
  ce:	48 b1       	in	r20, 0x08	; 8
  d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
  d8:	2f 70       	andi	r18, 0x0F	; 15
  da:	33 27       	eor	r19, r19
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <main+0x36>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	2a 95       	dec	r18
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <main+0x32>
  ea:	84 2b       	or	r24, r20
  ec:	88 b9       	out	0x08, r24	; 8
  ee:	e2 cf       	rjmp	.-60     	; 0xb4 <main+0x4>
		} else if (BUTTON_TWO_PRESS){
  f0:	19 99       	sbic	0x03, 1	; 3
  f2:	e0 cf       	rjmp	.-64     	; 0xb4 <main+0x4>
			counter = 0;
  f4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  f8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  fc:	db cf       	rjmp	.-74     	; 0xb4 <main+0x4>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
