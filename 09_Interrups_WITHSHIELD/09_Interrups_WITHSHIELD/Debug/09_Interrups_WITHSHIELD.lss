
09_Interrups_WITHSHIELD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d1  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027b  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_5>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 83 00 	call	0x106	; 0x106 <main>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_5>:

#define BUTTON_ONE_PRESS (!(PIND & (1<<1))) // -> PCINT17
#define BUTTON_TWO_PRESS (!(PINB & (1<<1))) // -> PCINT1

ISR(PCINT2_vect) // Triggers on PD changes
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
	PINC |= 0b00111110;
  8c:	86 b1       	in	r24, 0x06	; 6
  8e:	8e 63       	ori	r24, 0x3E	; 62
  90:	86 b9       	out	0x06, r24	; 6
	PIND |= (1<<PIND5);
  92:	89 b1       	in	r24, 0x09	; 9
  94:	80 62       	ori	r24, 0x20	; 32
  96:	89 b9       	out	0x09, r24	; 9
	PIND |= (1<<PIND6);
  98:	89 b1       	in	r24, 0x09	; 9
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	89 b9       	out	0x09, r24	; 9
}
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <init>:

void init(void){
	
	
	// Pin change interrupt btn1
	sei();					// enable global interrupt
  aa:	78 94       	sei
	PCICR |= (1<<PCIE2);	// enable PD PC interrupt (PCINT23..16)
  ac:	e8 e6       	ldi	r30, 0x68	; 104
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT17);	// enable PD1 interrupt
  b6:	ed e6       	ldi	r30, 0x6D	; 109
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
	
	// Buttons
	DDRD &= ~(1<<1);	//Button 1 PD1
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1<<1;
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	8b b9       	out	0x0b, r24	; 11
	
	DDRB &= ~(1<<1);	//Button 2 PB1
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	8d 7f       	andi	r24, 0xFD	; 253
  d0:	84 b9       	out	0x04, r24	; 4
	PORTB |= 1<<1;
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	85 b9       	out	0x05, r24	; 5
	
	// LEDS
	DDRC |= 0b00111110;
  d8:	87 b1       	in	r24, 0x07	; 7
  da:	8e 63       	ori	r24, 0x3E	; 62
  dc:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11110001;
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	81 6f       	ori	r24, 0xF1	; 241
  e2:	8a b9       	out	0x0a, r24	; 10

	// turn on green led
	GREEN_ON;
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	8e 63       	ori	r24, 0x3E	; 62
  e8:	88 b9       	out	0x08, r24	; 8
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	80 63       	ori	r24, 0x30	; 48
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	08 95       	ret

000000f2 <check_buttons>:

void check_buttons(void){
	/*if(BUTTON_ONE_PRESS)	{GREEN_ON;}
	else					{GREEN_OFF;}*/
	
	if(BUTTON_TWO_PRESS)	{RED_ON;}
  f2:	19 99       	sbic	0x03, 1	; 3
  f4:	04 c0       	rjmp	.+8      	; 0xfe <check_buttons+0xc>
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	81 6c       	ori	r24, 0xC1	; 193
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	08 95       	ret
	else					{RED_OFF;}
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	8e 73       	andi	r24, 0x3E	; 62
 102:	8b b9       	out	0x0b, r24	; 11
 104:	08 95       	ret

00000106 <main>:
}

int main(void){
	init();
 106:	0e 94 55 00 	call	0xaa	; 0xaa <init>
	while (1){
		check_buttons();
 10a:	0e 94 79 00 	call	0xf2	; 0xf2 <check_buttons>
 10e:	fd cf       	rjmp	.-6      	; 0x10a <main+0x4>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
