
09_Interrups_WITHSHIELD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c8  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000265  00000000  00000000  00000f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000375  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  0000158d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000161f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_3>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_5>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  78:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_5>:

#define BUTTON_ONE_PRESS (!(PIND & (1<<1))) // -> PCINT17
#define BUTTON_TWO_PRESS (!(PINB & (1<<1))) // -> PCINT1

ISR(PCINT2_vect) // Triggers on PD changes
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
	GREEN_TOGGLE;
  8e:	98 b1       	in	r25, 0x08	; 8
  90:	8e e3       	ldi	r24, 0x3E	; 62
  92:	89 27       	eor	r24, r25
  94:	88 b9       	out	0x08, r24	; 8
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	80 e3       	ldi	r24, 0x30	; 48
  9a:	89 27       	eor	r24, r25
  9c:	8b b9       	out	0x0b, r24	; 11
}
  9e:	9f 91       	pop	r25
  a0:	8f 91       	pop	r24
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <__vector_3>:

ISR(PCINT0_vect) // Triggers on PB changes
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	RED_TOGGLE;
  ba:	9b b1       	in	r25, 0x0b	; 11
  bc:	81 ec       	ldi	r24, 0xC1	; 193
  be:	89 27       	eor	r24, r25
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	89 27       	eor	r24, r25
  c8:	85 b9       	out	0x05, r24	; 5
}
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <init>:


void init(void){
	
	// DDR
	DDRB |= 0b00000000;
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b00111110;
  dc:	87 b1       	in	r24, 0x07	; 7
  de:	8e 63       	ori	r24, 0x3E	; 62
  e0:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11110001;
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	81 6f       	ori	r24, 0xF1	; 241
  e6:	8a b9       	out	0x0a, r24	; 10
	
	// Buttons
	//DDRD &= ~(1<<1);	//Button 1 PD1
	PORTD |= 1<<1;
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	8b b9       	out	0x0b, r24	; 11
	
	//DDRB &= ~(1<<1);	//Button 2 PB1
	PORTB |= 1<<1;
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	85 b9       	out	0x05, r24	; 5
	
	// turn on LEDS
	GREEN_ON;
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	8e 63       	ori	r24, 0x3E	; 62
  f8:	88 b9       	out	0x08, r24	; 8
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	80 63       	ori	r24, 0x30	; 48
  fe:	8b b9       	out	0x0b, r24	; 11
	RED_ON;
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	81 6c       	ori	r24, 0xC1	; 193
 104:	8b b9       	out	0x0b, r24	; 11
 106:	85 b1       	in	r24, 0x05	; 5
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	85 b9       	out	0x05, r24	; 5
	
	// Pin change interrupt btn1
	sei();					// enable global interrupt
 10c:	78 94       	sei
	
	PCICR |= (1<<PCIE2);	// enable PD PC interrupt
 10e:	e8 e6       	ldi	r30, 0x68	; 104
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	84 60       	ori	r24, 0x04	; 4
 116:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);	// enable PB PC interrupt
 118:	80 81       	ld	r24, Z
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24
	
	PCMSK0 |= (1<<1);	// mask out PB1 interrupt
 11e:	eb e6       	ldi	r30, 0x6B	; 107
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
	PCMSK2 |= (1<<1);	// mask out PD1 interrupt
 128:	ed e6       	ldi	r30, 0x6D	; 109
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <main>:
}

int main(void){
	init();
 134:	0e 94 6c 00 	call	0xd8	; 0xd8 <init>
 138:	ff cf       	rjmp	.-2      	; 0x138 <main+0x4>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
