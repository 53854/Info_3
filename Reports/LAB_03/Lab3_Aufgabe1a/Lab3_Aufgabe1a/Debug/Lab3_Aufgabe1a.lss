
Lab3_Aufgabe1a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00000434  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000434  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080015e  0080015e  00000526  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c9f  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000755  00000000  00000000  0000129f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000555  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000476  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069d  00000000  00000000  0000253a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002bd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 35       	cpi	r26, 0x5E	; 94
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e5       	ldi	r26, 0x5E	; 94
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 36       	cpi	r26, 0x60	; 96
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  9e:	0c 94 18 02 	jmp	0x430	; 0x430 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
uint16_t fenster[] = {0xEF08,0x1800, 0x123E, 0x1547,0x1354,0x165D};
uint8_t buttonOneStatus = 0; // 0 = PIND1 == 1
uint8_t buttonTwoStatus = 0; // 0 = PINB1 == 1

void init(){		
	sei();						// Interrupt
  a6:	78 94       	sei
	TIMSK0 |= (1 << OCIE0A);    // Timer0 A Match enable
  a8:	ee e6       	ldi	r30, 0x6E	; 110
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
	OCR0A = 155;                // reset compare 10ms
  b2:	8b e9       	ldi	r24, 0x9B	; 155
  b4:	87 bd       	out	0x27, r24	; 39

	TCCR0A |= (1 << WGM01);     // Configure CTC Mode
  b6:	84 b5       	in	r24, 0x24	; 36
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << WGM00);
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	8e 7f       	andi	r24, 0xFE	; 254
  c0:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << WGM02);
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	85 bd       	out	0x25, r24	; 37

	TCCR0B |= (1 << CS02) | (1 << CS00); // Prescaler 1024
  c8:	85 b5       	in	r24, 0x25	; 37
  ca:	85 60       	ori	r24, 0x05	; 5
  cc:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS01);
  ce:	85 b5       	in	r24, 0x25	; 37
  d0:	8d 7f       	andi	r24, 0xFD	; 253
  d2:	85 bd       	out	0x25, r24	; 37
	
	DDRD |= (1<<D_C)|(1<<Reset); //output: PD2 -> Data/Command; PD3 -> Reset
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	8c 60       	ori	r24, 0x0C	; 12
  d8:	8a b9       	out	0x0a, r24	; 10
  da:	08 95       	ret

000000dc <SPI_init>:
		
}

void SPI_init(){
	//set CS, MOSI and SCK to output:
	SPI_DDR |= (1 << CS) | (1 << MOSI) | (1 << SCK);
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	8c 62       	ori	r24, 0x2C	; 44
  e0:	84 b9       	out	0x04, r24	; 4

	//enable SPI, set as master, and clock to fosc/4:
	SPCR = (1 << SPE) | (1 << MSTR);
  e2:	80 e5       	ldi	r24, 0x50	; 80
  e4:	8c bd       	out	0x2c, r24	; 44
  e6:	08 95       	ret

000000e8 <SPISend8Bit>:
}

void SPISend8Bit(uint8_t data){
	PORTB &= ~(1<<CS);				//CS low
  e8:	95 b1       	in	r25, 0x05	; 5
  ea:	9b 7f       	andi	r25, 0xFB	; 251
  ec:	95 b9       	out	0x05, r25	; 5
	SPDR = data;					//load data into register
  ee:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));	//wait for transmission complete
  f0:	0d b4       	in	r0, 0x2d	; 45
  f2:	07 fe       	sbrs	r0, 7
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <SPISend8Bit+0x8>
	PORTB |= (1<<CS);				//CS high
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	08 95       	ret

000000fe <SendCommandSeq>:
}

void SendCommandSeq(const uint16_t * data, uint16_t Anzahl){
  fe:	8f 92       	push	r8
 100:	9f 92       	push	r9
 102:	af 92       	push	r10
 104:	bf 92       	push	r11
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	7c 01       	movw	r14, r24
 114:	8b 01       	movw	r16, r22
	uint32_t index;
	uint8_t SendeByte;
	for (index=0; index<Anzahl; index++){
 116:	81 2c       	mov	r8, r1
 118:	91 2c       	mov	r9, r1
 11a:	54 01       	movw	r10, r8
 11c:	16 c0       	rjmp	.+44     	; 0x14a <SendCommandSeq+0x4c>
		PORTD |= (1<<D_C);						//Data/Command auf High => Kommando-Modus
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	84 60       	ori	r24, 0x04	; 4
 122:	8b b9       	out	0x0b, r24	; 11
		SendeByte = (data[index] >> 8) & 0xFF;	//High-Byte des Kommandos
 124:	e4 01       	movw	r28, r8
 126:	cc 0f       	add	r28, r28
 128:	dd 1f       	adc	r29, r29
 12a:	ce 0d       	add	r28, r14
 12c:	df 1d       	adc	r29, r15
		SPISend8Bit(SendeByte);
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	0e 94 74 00 	call	0xe8	; 0xe8 <SPISend8Bit>
		SendeByte = data[index] & 0xFF;			//Low-Byte des Kommandos
		SPISend8Bit(SendeByte);
 134:	88 81       	ld	r24, Y
 136:	0e 94 74 00 	call	0xe8	; 0xe8 <SPISend8Bit>
		PORTD &= ~(1<<D_C);						//Data/Command auf Low => Daten-Modus
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8b 7f       	andi	r24, 0xFB	; 251
 13e:	8b b9       	out	0x0b, r24	; 11
}

void SendCommandSeq(const uint16_t * data, uint16_t Anzahl){
	uint32_t index;
	uint8_t SendeByte;
	for (index=0; index<Anzahl; index++){
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	88 1a       	sub	r8, r24
 144:	98 0a       	sbc	r9, r24
 146:	a8 0a       	sbc	r10, r24
 148:	b8 0a       	sbc	r11, r24
 14a:	c8 01       	movw	r24, r16
 14c:	a0 e0       	ldi	r26, 0x00	; 0
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	88 16       	cp	r8, r24
 152:	99 06       	cpc	r9, r25
 154:	aa 06       	cpc	r10, r26
 156:	bb 06       	cpc	r11, r27
 158:	10 f3       	brcs	.-60     	; 0x11e <SendCommandSeq+0x20>
		SPISend8Bit(SendeByte);
		SendeByte = data[index] & 0xFF;			//Low-Byte des Kommandos
		SPISend8Bit(SendeByte);
		PORTD &= ~(1<<D_C);						//Data/Command auf Low => Daten-Modus
	}
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	ff 90       	pop	r15
 164:	ef 90       	pop	r14
 166:	bf 90       	pop	r11
 168:	af 90       	pop	r10
 16a:	9f 90       	pop	r9
 16c:	8f 90       	pop	r8
 16e:	08 95       	ret

00000170 <Display_init>:

void Display_init(void) {
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	c2 55       	subi	r28, 0x52	; 82
 17a:	d1 09       	sbc	r29, r1
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
	const uint16_t InitData[] ={
 186:	82 e5       	ldi	r24, 0x52	; 82
 188:	ec e0       	ldi	r30, 0x0C	; 12
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	de 01       	movw	r26, r28
 18e:	11 96       	adiw	r26, 0x01	; 1
 190:	01 90       	ld	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	8a 95       	dec	r24
 196:	e1 f7       	brne	.-8      	; 0x190 <Display_init+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	85 ea       	ldi	r24, 0xA5	; 165
 19c:	9e e0       	ldi	r25, 0x0E	; 14
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <Display_init+0x2e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <Display_init+0x38>
 1a8:	00 00       	nop
		0xEF08, /*hochformat*/ 0x1800, 0x1200, 0x1583, 0x1300,
        0x16AF
	};
	
	_delay_ms(300);
	PORTD &= !(1<<Reset);			//Reset-Eingang des Displays auf Low => Beginn Hardware-Reset
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	1b b8       	out	0x0b, r1	; 11
 1ae:	2f e7       	ldi	r18, 0x7F	; 127
 1b0:	89 ea       	ldi	r24, 0xA9	; 169
 1b2:	93 e0       	ldi	r25, 0x03	; 3
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <Display_init+0x44>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <Display_init+0x4e>
 1be:	00 00       	nop
	_delay_ms(75);
	PORTB |= (1<<CS);				//SSEL auf High
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	85 b9       	out	0x05, r24	; 5
 1c6:	2f e7       	ldi	r18, 0x7F	; 127
 1c8:	89 ea       	ldi	r24, 0xA9	; 169
 1ca:	93 e0       	ldi	r25, 0x03	; 3
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <Display_init+0x5c>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <Display_init+0x66>
 1d6:	00 00       	nop
	_delay_ms(75);
	PORTD |= (1<<D_C);				//Data/Command auf High
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	84 60       	ori	r24, 0x04	; 4
 1dc:	8b b9       	out	0x0b, r24	; 11
 1de:	2f e7       	ldi	r18, 0x7F	; 127
 1e0:	89 ea       	ldi	r24, 0xA9	; 169
 1e2:	93 e0       	ldi	r25, 0x03	; 3
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <Display_init+0x74>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <Display_init+0x7e>
 1ee:	00 00       	nop
	_delay_ms(75);
	PORTD |= (1<<Reset);			//Reset-Eingang des Displays auf High => Ende Hardware Reset
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	88 60       	ori	r24, 0x08	; 8
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	2f e7       	ldi	r18, 0x7F	; 127
 1f8:	89 ea       	ldi	r24, 0xA9	; 169
 1fa:	93 e0       	ldi	r25, 0x03	; 3
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <Display_init+0x8c>
 204:	00 c0       	rjmp	.+0      	; 0x206 <Display_init+0x96>
 206:	00 00       	nop
	_delay_ms(75);
	SendCommandSeq(&InitData[0], 2);
 208:	62 e0       	ldi	r22, 0x02	; 2
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	0e 94 7f 00 	call	0xfe	; 0xfe <SendCommandSeq>
 214:	2f e7       	ldi	r18, 0x7F	; 127
 216:	89 ea       	ldi	r24, 0xA9	; 169
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <Display_init+0xaa>
 222:	00 c0       	rjmp	.+0      	; 0x224 <Display_init+0xb4>
 224:	00 00       	nop
	_delay_ms(75);
	SendCommandSeq(&InitData[2], 10);
 226:	6a e0       	ldi	r22, 0x0A	; 10
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	ce 01       	movw	r24, r28
 22c:	05 96       	adiw	r24, 0x05	; 5
 22e:	0e 94 7f 00 	call	0xfe	; 0xfe <SendCommandSeq>
 232:	2f e7       	ldi	r18, 0x7F	; 127
 234:	89 ea       	ldi	r24, 0xA9	; 169
 236:	93 e0       	ldi	r25, 0x03	; 3
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <Display_init+0xc8>
 240:	00 c0       	rjmp	.+0      	; 0x242 <Display_init+0xd2>
 242:	00 00       	nop
	_delay_ms(75);
	SendCommandSeq(&InitData[12], 23);
 244:	67 e1       	ldi	r22, 0x17	; 23
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	ce 01       	movw	r24, r28
 24a:	49 96       	adiw	r24, 0x19	; 25
 24c:	0e 94 7f 00 	call	0xfe	; 0xfe <SendCommandSeq>
 250:	2f e7       	ldi	r18, 0x7F	; 127
 252:	89 ea       	ldi	r24, 0xA9	; 169
 254:	93 e0       	ldi	r25, 0x03	; 3
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <Display_init+0xe6>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <Display_init+0xf0>
 260:	00 00       	nop
	_delay_ms(75);
	SendCommandSeq(&InitData[35], 6);
 262:	66 e0       	ldi	r22, 0x06	; 6
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	ce 01       	movw	r24, r28
 268:	89 5b       	subi	r24, 0xB9	; 185
 26a:	9f 4f       	sbci	r25, 0xFF	; 255
 26c:	0e 94 7f 00 	call	0xfe	; 0xfe <SendCommandSeq>
	// Buttons
	DDRD &= ~(1<<1);	//Configure PD1 as Input
 270:	8a b1       	in	r24, 0x0a	; 10
 272:	8d 7f       	andi	r24, 0xFD	; 253
 274:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1<<1);	//Configure PB1 as Input
 276:	84 b1       	in	r24, 0x04	; 4
 278:	8d 7f       	andi	r24, 0xFD	; 253
 27a:	84 b9       	out	0x04, r24	; 4
	PORTD |= 1<<1;		//DDRD &= ~(1<<1);	//Button 1 PD1
 27c:	8b b1       	in	r24, 0x0b	; 11
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 1<<1;		//DDRB &= ~(1<<1);	//Button 2 PB1
 282:	85 b1       	in	r24, 0x05	; 5
 284:	82 60       	ori	r24, 0x02	; 2
 286:	85 b9       	out	0x05, r24	; 5
}
 288:	ce 5a       	subi	r28, 0xAE	; 174
 28a:	df 4f       	sbci	r29, 0xFF	; 255
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <send16BitColour>:

void send16BitColour(uint16_t colourhex){
 29c:	cf 93       	push	r28
 29e:	c8 2f       	mov	r28, r24
	SPISend8Bit((colourhex >> 8) & 0xFF);	// High bit
 2a0:	89 2f       	mov	r24, r25
 2a2:	0e 94 74 00 	call	0xe8	; 0xe8 <SPISend8Bit>
	SPISend8Bit((colourhex) & 0xFF);		// Low bit
 2a6:	8c 2f       	mov	r24, r28
 2a8:	0e 94 74 00 	call	0xe8	; 0xe8 <SPISend8Bit>
}
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <fillScreen>:

void fillScreen(uint16_t colourhex){
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	8c 01       	movw	r16, r24
	for(uint16_t i = 0; i <= 132*176; i++){
 2ba:	c0 e0       	ldi	r28, 0x00	; 0
 2bc:	d0 e0       	ldi	r29, 0x00	; 0
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <fillScreen+0x18>
		send16BitColour(colourhex);
 2c0:	c8 01       	movw	r24, r16
 2c2:	0e 94 4e 01 	call	0x29c	; 0x29c <send16BitColour>
	SPISend8Bit((colourhex >> 8) & 0xFF);	// High bit
	SPISend8Bit((colourhex) & 0xFF);		// Low bit
}

void fillScreen(uint16_t colourhex){
	for(uint16_t i = 0; i <= 132*176; i++){
 2c6:	21 96       	adiw	r28, 0x01	; 1
 2c8:	c1 3c       	cpi	r28, 0xC1	; 193
 2ca:	8a e5       	ldi	r24, 0x5A	; 90
 2cc:	d8 07       	cpc	r29, r24
 2ce:	c0 f3       	brcs	.-16     	; 0x2c0 <fillScreen+0x10>
		send16BitColour(colourhex);
	}
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	08 95       	ret

000002da <fillWindow>:

void fillWindow(uint16_t window, uint16_t colourhex){
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	8b 01       	movw	r16, r22
	SendCommandSeq(window, 6);
 2e4:	66 e0       	ldi	r22, 0x06	; 6
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	0e 94 7f 00 	call	0xfe	; 0xfe <SendCommandSeq>
	for(int i = 0; i <100; i++){
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
 2ee:	d0 e0       	ldi	r29, 0x00	; 0
 2f0:	04 c0       	rjmp	.+8      	; 0x2fa <fillWindow+0x20>
		send16BitColour(colourhex);		
 2f2:	c8 01       	movw	r24, r16
 2f4:	0e 94 4e 01 	call	0x29c	; 0x29c <send16BitColour>
	}
}

void fillWindow(uint16_t window, uint16_t colourhex){
	SendCommandSeq(window, 6);
	for(int i = 0; i <100; i++){
 2f8:	21 96       	adiw	r28, 0x01	; 1
 2fa:	c4 36       	cpi	r28, 0x64	; 100
 2fc:	d1 05       	cpc	r29, r1
 2fe:	cc f3       	brlt	.-14     	; 0x2f2 <fillWindow+0x18>
		send16BitColour(colourhex);		
	}
}
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	08 95       	ret

0000030a <main>:

int main(void){
	init();
 30a:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	SPI_init();
 30e:	0e 94 6e 00 	call	0xdc	; 0xdc <SPI_init>
	Display_init();
 312:	0e 94 b8 00 	call	0x170	; 0x170 <Display_init>
	
	fillScreen(Yellow);
 316:	80 ee       	ldi	r24, 0xE0	; 224
 318:	9f ef       	ldi	r25, 0xFF	; 255
 31a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <fillScreen>
	
	fillWindow(fenster, Red);
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	78 ef       	ldi	r23, 0xF8	; 248
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	0e 94 6d 01 	call	0x2da	; 0x2da <fillWindow>
	
	while(1){
		if(BUTTON_ONE_PRESS && buttonOneStatus == 0){
 32a:	49 99       	sbic	0x09, 1	; 9
 32c:	07 c0       	rjmp	.+14     	; 0x33c <main+0x32>
 32e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <buttonOneStatus>
 332:	81 11       	cpse	r24, r1
 334:	03 c0       	rjmp	.+6      	; 0x33c <main+0x32>
			buttonOneStatus = 1;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <buttonOneStatus>
		}
		if(BUTTON_TWO_PRESS && buttonTwoStatus == 0){
 33c:	19 99       	sbic	0x03, 1	; 3
 33e:	f5 cf       	rjmp	.-22     	; 0x32a <main+0x20>
 340:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
 344:	81 11       	cpse	r24, r1
 346:	f1 cf       	rjmp	.-30     	; 0x32a <main+0x20>
			buttonTwoStatus = 1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
 34e:	ed cf       	rjmp	.-38     	; 0x32a <main+0x20>

00000350 <__vector_14>:
		}
	}
}

ISR(TIMER0_COMPA_vect){
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	2f 93       	push	r18
 35c:	3f 93       	push	r19
 35e:	4f 93       	push	r20
 360:	5f 93       	push	r21
 362:	6f 93       	push	r22
 364:	7f 93       	push	r23
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	af 93       	push	r26
 36c:	bf 93       	push	r27
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	ef 93       	push	r30
 374:	ff 93       	push	r31
	
		if(buttonOneStatus == 1 && BUTTON_ONE_PRESS) {
 376:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <buttonOneStatus>
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	09 f5       	brne	.+66     	; 0x3c0 <__vector_14+0x70>
 37e:	49 99       	sbic	0x09, 1	; 9
 380:	1f c0       	rjmp	.+62     	; 0x3c0 <__vector_14+0x70>
			if(fenster[2] < 4730){ 
 382:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 386:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 38a:	8a 37       	cpi	r24, 0x7A	; 122
 38c:	92 41       	sbci	r25, 0x12	; 18
 38e:	c0 f4       	brcc	.+48     	; 0x3c0 <__vector_14+0x70>
				fillWindow(fenster,Yellow);
 390:	c0 e0       	ldi	r28, 0x00	; 0
 392:	d1 e0       	ldi	r29, 0x01	; 1
 394:	60 ee       	ldi	r22, 0xE0	; 224
 396:	7f ef       	ldi	r23, 0xFF	; 255
 398:	ce 01       	movw	r24, r28
 39a:	0e 94 6d 01 	call	0x2da	; 0x2da <fillWindow>
				fenster[2] += 1;
 39e:	8c 81       	ldd	r24, Y+4	; 0x04
 3a0:	9d 81       	ldd	r25, Y+5	; 0x05
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	9d 83       	std	Y+5, r25	; 0x05
 3a6:	8c 83       	std	Y+4, r24	; 0x04
				fenster[3] += 1;
 3a8:	8e 81       	ldd	r24, Y+6	; 0x06
 3aa:	9f 81       	ldd	r25, Y+7	; 0x07
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	9f 83       	std	Y+7, r25	; 0x07
 3b0:	8e 83       	std	Y+6, r24	; 0x06
				fillWindow(fenster,Red);
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	78 ef       	ldi	r23, 0xF8	; 248
 3b6:	ce 01       	movw	r24, r28
 3b8:	0e 94 6d 01 	call	0x2da	; 0x2da <fillWindow>
				buttonOneStatus = 0;
 3bc:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <buttonOneStatus>
			}
			
		}
		if(buttonTwoStatus == 1 && BUTTON_TWO_PRESS) {
 3c0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	09 f5       	brne	.+66     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3c8:	19 99       	sbic	0x03, 1	; 3
 3ca:	1f c0       	rjmp	.+62     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			if(fenster[2] > 4608){
 3cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 3d0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	92 41       	sbci	r25, 0x12	; 18
 3d8:	c0 f0       	brcs	.+48     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
				fillWindow(fenster,Yellow);
 3da:	c0 e0       	ldi	r28, 0x00	; 0
 3dc:	d1 e0       	ldi	r29, 0x01	; 1
 3de:	60 ee       	ldi	r22, 0xE0	; 224
 3e0:	7f ef       	ldi	r23, 0xFF	; 255
 3e2:	ce 01       	movw	r24, r28
 3e4:	0e 94 6d 01 	call	0x2da	; 0x2da <fillWindow>
				fenster[2] -= 1;
 3e8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ea:	9d 81       	ldd	r25, Y+5	; 0x05
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	9d 83       	std	Y+5, r25	; 0x05
 3f0:	8c 83       	std	Y+4, r24	; 0x04
				fenster[3] -= 1;
 3f2:	8e 81       	ldd	r24, Y+6	; 0x06
 3f4:	9f 81       	ldd	r25, Y+7	; 0x07
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	9f 83       	std	Y+7, r25	; 0x07
 3fa:	8e 83       	std	Y+6, r24	; 0x06
				fillWindow(fenster,Red);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	78 ef       	ldi	r23, 0xF8	; 248
 400:	ce 01       	movw	r24, r28
 402:	0e 94 6d 01 	call	0x2da	; 0x2da <fillWindow>
				buttonTwoStatus = 0;
 406:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end>
			
		}
		//if(){}
			
	
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
