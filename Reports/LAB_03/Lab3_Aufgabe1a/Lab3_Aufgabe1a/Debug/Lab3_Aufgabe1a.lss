
Lab3_Aufgabe1a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000232  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d3  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000728  00000000  00000000  00000d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038e  00000000  00000000  00001497  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041a  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003bc  00000000  00000000  00001cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000020a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  8e:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <SPI_init>:
#define D_C		PIND2		//display: Data/Command
#define Reset	PIND3		//display: Reset

void SPI_init(){
	//set CS, MOSI and SCK to output:
	SPI_DDR |= (1 << CS) | (1 << MOSI) | (1 << SCK);
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8c 62       	ori	r24, 0x2C	; 44
  9a:	84 b9       	out	0x04, r24	; 4

	//enable SPI, set as master, and clock to fosc/4:
	SPCR = (1 << SPE) | (1 << MSTR);
  9c:	80 e5       	ldi	r24, 0x50	; 80
  9e:	8c bd       	out	0x2c, r24	; 44
  a0:	08 95       	ret

000000a2 <SPISend8Bit>:
}

void SPISend8Bit(uint8_t data){
	PORTB &= ~(1<<CS);				//CS low
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	9b 7f       	andi	r25, 0xFB	; 251
  a6:	95 b9       	out	0x05, r25	; 5
	SPDR = data;					//load data into register
  a8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));	//wait for transmission complete
  aa:	0d b4       	in	r0, 0x2d	; 45
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <SPISend8Bit+0x8>
	PORTB |= (1<<CS);				//CS high
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	08 95       	ret

000000b8 <SendCommandSeq>:
}

void SendCommandSeq(const uint16_t * data, uint16_t Anzahl){
  b8:	8f 92       	push	r8
  ba:	9f 92       	push	r9
  bc:	af 92       	push	r10
  be:	bf 92       	push	r11
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	7c 01       	movw	r14, r24
  ce:	8b 01       	movw	r16, r22
	uint32_t index;
	uint8_t SendeByte;
	for (index=0; index<Anzahl; index++){
  d0:	81 2c       	mov	r8, r1
  d2:	91 2c       	mov	r9, r1
  d4:	54 01       	movw	r10, r8
  d6:	16 c0       	rjmp	.+44     	; 0x104 <SendCommandSeq+0x4c>
		PORTD |= (1<<D_C);						//Data/Command auf High => Kommando-Modus
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	8b b9       	out	0x0b, r24	; 11
		SendeByte = (data[index] >> 8) & 0xFF;	//High-Byte des Kommandos
  de:	e4 01       	movw	r28, r8
  e0:	cc 0f       	add	r28, r28
  e2:	dd 1f       	adc	r29, r29
  e4:	ce 0d       	add	r28, r14
  e6:	df 1d       	adc	r29, r15
		SPISend8Bit(SendeByte);
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	0e 94 51 00 	call	0xa2	; 0xa2 <SPISend8Bit>
		SendeByte = data[index] & 0xFF;			//Low-Byte des Kommandos
		SPISend8Bit(SendeByte);
  ee:	88 81       	ld	r24, Y
  f0:	0e 94 51 00 	call	0xa2	; 0xa2 <SPISend8Bit>
		PORTD &= ~(1<<D_C);						//Data/Command auf Low => Daten-Modus
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	8b 7f       	andi	r24, 0xFB	; 251
  f8:	8b b9       	out	0x0b, r24	; 11
}

void SendCommandSeq(const uint16_t * data, uint16_t Anzahl){
	uint32_t index;
	uint8_t SendeByte;
	for (index=0; index<Anzahl; index++){
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	88 1a       	sub	r8, r24
  fe:	98 0a       	sbc	r9, r24
 100:	a8 0a       	sbc	r10, r24
 102:	b8 0a       	sbc	r11, r24
 104:	c8 01       	movw	r24, r16
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	88 16       	cp	r8, r24
 10c:	99 06       	cpc	r9, r25
 10e:	aa 06       	cpc	r10, r26
 110:	bb 06       	cpc	r11, r27
 112:	10 f3       	brcs	.-60     	; 0xd8 <SendCommandSeq+0x20>
		SPISend8Bit(SendeByte);
		SendeByte = data[index] & 0xFF;			//Low-Byte des Kommandos
		SPISend8Bit(SendeByte);
		PORTD &= ~(1<<D_C);						//Data/Command auf Low => Daten-Modus
	}
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	ff 90       	pop	r15
 11e:	ef 90       	pop	r14
 120:	bf 90       	pop	r11
 122:	af 90       	pop	r10
 124:	9f 90       	pop	r9
 126:	8f 90       	pop	r8
 128:	08 95       	ret

0000012a <Display_init>:

void Display_init(void) {
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	c6 54       	subi	r28, 0x46	; 70
 134:	d1 09       	sbc	r29, r1
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
	const uint16_t InitData[] ={
 140:	86 e4       	ldi	r24, 0x46	; 70
 142:	e0 e0       	ldi	r30, 0x00	; 0
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	de 01       	movw	r26, r28
 148:	11 96       	adiw	r26, 0x01	; 1
 14a:	01 90       	ld	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	8a 95       	dec	r24
 150:	e1 f7       	brne	.-8      	; 0x14a <Display_init+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	85 ea       	ldi	r24, 0xA5	; 165
 156:	9e e0       	ldi	r25, 0x0E	; 14
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <Display_init+0x2e>
 160:	00 c0       	rjmp	.+0      	; 0x162 <Display_init+0x38>
 162:	00 00       	nop
		0x7F01, 0xE181, 0xE202, 0xE276, 0xE183,
		0x8001, 0xEF90, 0x0000
	};
	
	_delay_ms(300);
	PORTD &= !(1<<Reset);			//Reset-Eingang des Displays auf Low => Beginn Hardware-Reset
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	1b b8       	out	0x0b, r1	; 11
 168:	2f e7       	ldi	r18, 0x7F	; 127
 16a:	89 ea       	ldi	r24, 0xA9	; 169
 16c:	93 e0       	ldi	r25, 0x03	; 3
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <Display_init+0x44>
 176:	00 c0       	rjmp	.+0      	; 0x178 <Display_init+0x4e>
 178:	00 00       	nop
	_delay_ms(75);
	PORTB |= (1<<CS);				//SSEL auf High
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	85 b9       	out	0x05, r24	; 5
 180:	2f e7       	ldi	r18, 0x7F	; 127
 182:	89 ea       	ldi	r24, 0xA9	; 169
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <Display_init+0x5c>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <Display_init+0x66>
 190:	00 00       	nop
	_delay_ms(75);
	PORTD |= (1<<D_C);				//Data/Command auf High
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	84 60       	ori	r24, 0x04	; 4
 196:	8b b9       	out	0x0b, r24	; 11
 198:	2f e7       	ldi	r18, 0x7F	; 127
 19a:	89 ea       	ldi	r24, 0xA9	; 169
 19c:	93 e0       	ldi	r25, 0x03	; 3
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <Display_init+0x74>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <Display_init+0x7e>
 1a8:	00 00       	nop
	_delay_ms(75);
	PORTD |= (1<<Reset);			//Reset-Eingang des Displays auf High => Ende Hardware Reset
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	88 60       	ori	r24, 0x08	; 8
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	2f e7       	ldi	r18, 0x7F	; 127
 1b2:	89 ea       	ldi	r24, 0xA9	; 169
 1b4:	93 e0       	ldi	r25, 0x03	; 3
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <Display_init+0x8c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <Display_init+0x96>
 1c0:	00 00       	nop
	_delay_ms(75);
	SendCommandSeq(&InitData[0], 2);
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	ce 01       	movw	r24, r28
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	0e 94 5c 00 	call	0xb8	; 0xb8 <SendCommandSeq>
 1ce:	2f e7       	ldi	r18, 0x7F	; 127
 1d0:	89 ea       	ldi	r24, 0xA9	; 169
 1d2:	93 e0       	ldi	r25, 0x03	; 3
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <Display_init+0xaa>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <Display_init+0xb4>
 1de:	00 00       	nop
	_delay_ms(75);
	SendCommandSeq(&InitData[2], 10);
 1e0:	6a e0       	ldi	r22, 0x0A	; 10
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	ce 01       	movw	r24, r28
 1e6:	05 96       	adiw	r24, 0x05	; 5
 1e8:	0e 94 5c 00 	call	0xb8	; 0xb8 <SendCommandSeq>
 1ec:	2f e7       	ldi	r18, 0x7F	; 127
 1ee:	89 ea       	ldi	r24, 0xA9	; 169
 1f0:	93 e0       	ldi	r25, 0x03	; 3
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <Display_init+0xc8>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <Display_init+0xd2>
 1fc:	00 00       	nop
	_delay_ms(75);
	SendCommandSeq(&InitData[12], 23);
 1fe:	67 e1       	ldi	r22, 0x17	; 23
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	ce 01       	movw	r24, r28
 204:	49 96       	adiw	r24, 0x19	; 25
 206:	0e 94 5c 00 	call	0xb8	; 0xb8 <SendCommandSeq>
}
 20a:	ca 5b       	subi	r28, 0xBA	; 186
 20c:	df 4f       	sbci	r29, 0xFF	; 255
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	de bf       	out	0x3e, r29	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	cd bf       	out	0x3d, r28	; 61
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <main>:



int main(void){
	DDRD |= (1<<D_C)|(1<<Reset);		//output: PD2 -> Data/Command; PD3 -> Reset
 21e:	8a b1       	in	r24, 0x0a	; 10
 220:	8c 60       	ori	r24, 0x0C	; 12
 222:	8a b9       	out	0x0a, r24	; 10
	SPI_init();
 224:	0e 94 4b 00 	call	0x96	; 0x96 <SPI_init>
	Display_init();
 228:	0e 94 95 00 	call	0x12a	; 0x12a <Display_init>
 22c:	ff cf       	rjmp	.-2      	; 0x22c <main+0xe>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
