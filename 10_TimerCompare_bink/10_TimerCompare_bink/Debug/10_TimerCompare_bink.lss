
10_TimerCompare_bink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000288  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e9  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064b  00000000  00000000  00000a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fc  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000385  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  0000173d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  9e:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
#define LED_OFF PORTC		&= ~(1<<1)
#define LED_TOGGLE PORTC	^= (1<<1)

void init(void){
	// LED
	DDRC |= 0b00111110; // PC1-6 as output
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8e 63       	ori	r24, 0x3E	; 62
  aa:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b11110001; // PD0-4 as output
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	81 6f       	ori	r24, 0xF1	; 241
  b0:	8a b9       	out	0x0a, r24	; 10
	PORTC		|= (1<<1); // LED 1 one
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	88 b9       	out	0x08, r24	; 8
	
	// Interrupt
	sei();
  b8:	78 94       	sei
	TIMSK0 |= (1<<OCIE0A);			// Timer0 A Match enable
  ba:	ee e6       	ldi	r30, 0x6E	; 110
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	80 83       	st	Z, r24
	OCR0A = 155;
  c4:	8b e9       	ldi	r24, 0x9B	; 155
  c6:	87 bd       	out	0x27, r24	; 39
	
	TCCR0A |= (1<<WGM01);			// Configure CTC Mode
  c8:	84 b5       	in	r24, 0x24	; 36
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<WGM00);
  ce:	84 b5       	in	r24, 0x24	; 36
  d0:	8e 7f       	andi	r24, 0xFE	; 254
  d2:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1<<WGM02);
  d4:	85 b5       	in	r24, 0x25	; 37
  d6:	87 7f       	andi	r24, 0xF7	; 247
  d8:	85 bd       	out	0x25, r24	; 37
	
	TCCR0B |=(1<<CS02) | (1<<CS00); // Prescaler 1024
  da:	85 b5       	in	r24, 0x25	; 37
  dc:	85 60       	ori	r24, 0x05	; 5
  de:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
  e0:	85 b5       	in	r24, 0x25	; 37
  e2:	8d 7f       	andi	r24, 0xFD	; 253
  e4:	85 bd       	out	0x25, r24	; 37
  e6:	08 95       	ret

000000e8 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
	
	static volatile uint16_t oneSecondEqual = 60;
	static volatile uint16_t counter = 0;
	counter ++;
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	switch (counter){
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	8c 32       	cpi	r24, 0x2C	; 44
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	92 07       	cpc	r25, r18
 118:	09 f4       	brne	.+2      	; 0x11c <__vector_14+0x34>
 11a:	42 c0       	rjmp	.+132    	; 0x1a0 <__vector_14+0xb8>
 11c:	70 f4       	brcc	.+28     	; 0x13a <__vector_14+0x52>
 11e:	88 37       	cpi	r24, 0x78	; 120
 120:	91 05       	cpc	r25, r1
 122:	49 f1       	breq	.+82     	; 0x176 <__vector_14+0x8e>
 124:	18 f4       	brcc	.+6      	; 0x12c <__vector_14+0x44>
 126:	cc 97       	sbiw	r24, 0x3c	; 60
 128:	f9 f0       	breq	.+62     	; 0x168 <__vector_14+0x80>
 12a:	67 c0       	rjmp	.+206    	; 0x1fa <__vector_14+0x112>
 12c:	84 3b       	cpi	r24, 0xB4	; 180
 12e:	91 05       	cpc	r25, r1
 130:	49 f1       	breq	.+82     	; 0x184 <__vector_14+0x9c>
 132:	80 3f       	cpi	r24, 0xF0	; 240
 134:	91 05       	cpc	r25, r1
 136:	69 f1       	breq	.+90     	; 0x192 <__vector_14+0xaa>
 138:	60 c0       	rjmp	.+192    	; 0x1fa <__vector_14+0x112>
 13a:	80 3e       	cpi	r24, 0xE0	; 224
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	92 07       	cpc	r25, r18
 140:	09 f4       	brne	.+2      	; 0x144 <__vector_14+0x5c>
 142:	43 c0       	rjmp	.+134    	; 0x1ca <__vector_14+0xe2>
 144:	40 f4       	brcc	.+16     	; 0x156 <__vector_14+0x6e>
 146:	88 36       	cpi	r24, 0x68	; 104
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	92 07       	cpc	r25, r18
 14c:	81 f1       	breq	.+96     	; 0x1ae <__vector_14+0xc6>
 14e:	84 3a       	cpi	r24, 0xA4	; 164
 150:	91 40       	sbci	r25, 0x01	; 1
 152:	a1 f1       	breq	.+104    	; 0x1bc <__vector_14+0xd4>
 154:	52 c0       	rjmp	.+164    	; 0x1fa <__vector_14+0x112>
 156:	8c 31       	cpi	r24, 0x1C	; 28
 158:	22 e0       	ldi	r18, 0x02	; 2
 15a:	92 07       	cpc	r25, r18
 15c:	e9 f1       	breq	.+122    	; 0x1d8 <__vector_14+0xf0>
 15e:	88 35       	cpi	r24, 0x58	; 88
 160:	92 40       	sbci	r25, 0x02	; 2
 162:	09 f4       	brne	.+2      	; 0x166 <__vector_14+0x7e>
 164:	40 c0       	rjmp	.+128    	; 0x1e6 <__vector_14+0xfe>
 166:	49 c0       	rjmp	.+146    	; 0x1fa <__vector_14+0x112>
		case 60:
			PORTC		&= ~(1<<1); // 1GN off
 168:	88 b1       	in	r24, 0x08	; 8
 16a:	8d 7f       	andi	r24, 0xFD	; 253
 16c:	88 b9       	out	0x08, r24	; 8
			PORTC		|= (1<<2); // 2GN on
 16e:	88 b1       	in	r24, 0x08	; 8
 170:	84 60       	ori	r24, 0x04	; 4
 172:	88 b9       	out	0x08, r24	; 8
			break;
 174:	42 c0       	rjmp	.+132    	; 0x1fa <__vector_14+0x112>
		case 120:
			PORTC		&= ~(1<<2); // 2GN off
 176:	88 b1       	in	r24, 0x08	; 8
 178:	8b 7f       	andi	r24, 0xFB	; 251
 17a:	88 b9       	out	0x08, r24	; 8
			PORTC		|= (1<<3); // 3GN on
 17c:	88 b1       	in	r24, 0x08	; 8
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	88 b9       	out	0x08, r24	; 8
			break;
 182:	3b c0       	rjmp	.+118    	; 0x1fa <__vector_14+0x112>
		case 180:
			PORTC		&= ~(1<<3); // 3GN off
 184:	88 b1       	in	r24, 0x08	; 8
 186:	87 7f       	andi	r24, 0xF7	; 247
 188:	88 b9       	out	0x08, r24	; 8
			PORTC		|= (1<<4); // 4GN on
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	80 61       	ori	r24, 0x10	; 16
 18e:	88 b9       	out	0x08, r24	; 8
			break;
 190:	34 c0       	rjmp	.+104    	; 0x1fa <__vector_14+0x112>
		case 240:
			PORTC		&= ~(1<<4); // 4GN off
 192:	88 b1       	in	r24, 0x08	; 8
 194:	8f 7e       	andi	r24, 0xEF	; 239
 196:	88 b9       	out	0x08, r24	; 8
			PORTC		|= (1<<5); // 5GN on
 198:	88 b1       	in	r24, 0x08	; 8
 19a:	80 62       	ori	r24, 0x20	; 32
 19c:	88 b9       	out	0x08, r24	; 8
			break;
 19e:	2d c0       	rjmp	.+90     	; 0x1fa <__vector_14+0x112>
		case 300:
			PORTC		&= ~(1<<5); // 5GN off
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	8f 7d       	andi	r24, 0xDF	; 223
 1a4:	88 b9       	out	0x08, r24	; 8
			PORTD		|= (1<<4); // 6GN on
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	80 61       	ori	r24, 0x10	; 16
 1aa:	8b b9       	out	0x0b, r24	; 11
			break;
 1ac:	26 c0       	rjmp	.+76     	; 0x1fa <__vector_14+0x112>
		case 360:
			PORTD		&= ~(1<<4); // 6GN off
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	8f 7e       	andi	r24, 0xEF	; 239
 1b2:	8b b9       	out	0x0b, r24	; 11
			PORTD		|= (1<<5); // 7GN on
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	80 62       	ori	r24, 0x20	; 32
 1b8:	8b b9       	out	0x0b, r24	; 11
			break;
 1ba:	1f c0       	rjmp	.+62     	; 0x1fa <__vector_14+0x112>
		case 420:
			PORTD		&= ~(1<<5); // 7GN off
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	8f 7d       	andi	r24, 0xDF	; 223
 1c0:	8b b9       	out	0x0b, r24	; 11
			PORTD		|= (1<<6); // 8RT on
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	8b b9       	out	0x0b, r24	; 11
			break;
 1c8:	18 c0       	rjmp	.+48     	; 0x1fa <__vector_14+0x112>
		case 480:
			PORTD		&= ~(1<<6); // 8RT off
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	8f 7b       	andi	r24, 0xBF	; 191
 1ce:	8b b9       	out	0x0b, r24	; 11
			PORTD		|= (1<<7); // 9RT on
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	8b b9       	out	0x0b, r24	; 11
			break;
 1d6:	11 c0       	rjmp	.+34     	; 0x1fa <__vector_14+0x112>
		case 540:
			PORTD		&= ~(1<<7); // 9RT off
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8f 77       	andi	r24, 0x7F	; 127
 1dc:	8b b9       	out	0x0b, r24	; 11
			PORTD		|= (1<<0); // 10RT on
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	8b b9       	out	0x0b, r24	; 11
			break;
 1e4:	0a c0       	rjmp	.+20     	; 0x1fa <__vector_14+0x112>
		case 600:
			PORTD		&= ~(1<<0); // 10RT off
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	8e 7f       	andi	r24, 0xFE	; 254
 1ea:	8b b9       	out	0x0b, r24	; 11
			PORTC		|= (1<<1); // 1GN on
 1ec:	88 b1       	in	r24, 0x08	; 8
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	88 b9       	out	0x08, r24	; 8
			counter = 0;
 1f2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
	}

}
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <main>:

int main(void){
	init();
 20a:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
 20e:	ff cf       	rjmp	.-2      	; 0x20e <main+0x4>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
